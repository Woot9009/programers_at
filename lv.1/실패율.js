/*
슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다.
그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다.
원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.
이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다.
역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다.
오렐리를 위해 실패율을 구하는 코드를 완성하라.

실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때,
실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
stages의 길이는 1 이상 200,000 이하이다.
stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.
*/

let fail = {};

function solution(N, stages) {
    let answer = [];
    let players = stages.length;
    
    //스테이지별 실패율을 구해서 객체로 추가하는 반복문
    for (let i=1; i<=N; i++) {
        let cnt = 0;
        for (let k=0; k<stages.length; k++) {
            if (stages[k] === i) cnt++;
        }
        fail[i] = cnt / players;//괄호표기법으로 객체추가 해줘야 i가 변수로 반영됨(점표기법은 그냥 문자'i'하나 추가되고 끝)
        players -= cnt;
    }
    
    //entries의 형태가 [[키1,값1], [키2,값2], ...]이므로 아래와 같이 b[1]-a[1] 쓰면 값을 기준으로 정렬됨
    let sorted = Object.entries(fail).sort((a,b) => b[1]-a[1]);
    for (let i=0; i<sorted.length; i++) {
        answer.push(Number(sorted[i][0]));//정렬된 상태에서 키(스테이지번호)만 answer에 push
    }
    
    return answer;
}

/*
1. 실패율을 구함
  1-1. n번 스테이지의 실패율은 n번cnt / (n-1번분모 - n-1번cnt)
  1-2. 분모를 for문 안에서 변수 선언해주면서 갱신해야함
2. 실패율과 스테이지 번호를 매칭해서 실패율기준으로 내림차순한 스테이지 번호를 return
  2-1. 스테이지 번호를 키, 실패율을 값으로 객체생성
  2-2. 실패율 내림차순으로 정렬한 후, 스테이지 번호를 정답배열에 담아 return
*/